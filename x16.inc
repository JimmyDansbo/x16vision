; Uncomment for ACME assembler
;!ifdef x16_inc !eof
; Uncomment for CC65 assembler
.ifndef cx16_inc
x16_inc = 1

Vera_Reg_AddrL		= $9F20
Vera_Reg_AddrM		= $9F21
Vera_Reg_AddrH		= $9F22
Vera_Reg_Data0		= $9F23
Vera_Reg_Data1		= $9F24
Vera_Reg_Ctrl		= $9F25
Vera_Reg_IEN		= $9F26
Vera_Reg_ISR		= $9F27
Vera_Reg_IRQLineL	= $9F28 ; Write only
Vera_Reg_ScanLineL	= $9F28 ; Read only
; DCSEL=0
Vera_Reg_DCVideo	= $9F29
Vera_Reg_DCHSCale	= $9F2A
Vera_Reg_DCVScale	= $9F2B
Vera_Reg_DCBorder	= $9F2C
; DCSEL=1
Vera_Reg_DCHStart	= $9F29
Vera_Reg_DCHStop	= $9F2A
Vera_Reg_DCVStart	= $9F2B
Vera_Reg_DCVStop	= $9F2C
; DCSEL=2
Vera_Reg_FXCtrol	= $9F29
Vera_Reg_FXTilebase	= $9F2A
Vera_Reg_FXMapbase	= $9F2B
Vera_Reg_FXMult		= $9F2C
; DCSEL=3
Vera_Reg_FXXIncrL	= $9F29
Vera_Reg_FXXIncrH	= $9F2A
Vera_Reg_FXYIncrL	= $9F2B
Vera_Reg_FXYIncrH	= $9F2C
; DCSEL=4
Vera_Reg_FXXPosL	= $9F29
Vera_Reg_FXXPosH	= $9F2A
Vera_Reg_FXYPos		= $9F2B
Vera_Reg_FXYPosH	= $9F2C
; DCSEL=5
Vera_Reg_FXXPosS	= $9F29
Vera_Reg_FXYPosS	= $9F2A
Vera_Reg_FXPolyFillL	= $9F2B
Vera_Reg_FXPolyFillH	= $9F2C
; DCSEL=6
Vera_Reg_FXCacheL	= $9F29 ; Write only
Vera_Reg_FXAccumReset	= $9F29 ; Read only
Vera_Reg_FXCacheM	= $9F2A ; Write only
Vera_Reg_FXAccum	= $9F2A ; Read only
Vera_Reg_FXCacheH	= $9F2B
Vera_Reg_FXCacheU	= $9F2C
; DCSEL=63
Vera_Reg_DCVerV		= $9F29 ; 'V'
Vera_Reg_DCVerMajorR	= $9F2A ; Major release
Vera_Reg_DCVerMinorR	= $9F2B ; Minor release
Vera_Reg_DCVerBuild	= $9F2C ; Build number

Vera_Reg_L0Config	= $9F2D
Vera_Reg_L0MapBase	= $9F2E
Vera_Reg_L0TileBase	= $9F2F
Vera_Reg_L0HScrollL	= $9F30
Vera_Reg_L0HScrollH	= $9F31
Vera_Reg_L0VScrollL	= $9F32
Vera_Reg_L0VScrollH	= $9F33

Vera_Reg_L1Config	= $9F34
Vera_Reg_L1MapBase	= $9F35
Vera_Reg_L1TileBase	= $9F36
Vera_Reg_L1HScrollL	= $9F37
Vera_Reg_L1HScrollH	= $9F38
Vera_Reg_L1VScrollL	= $9F39
Vera_Reg_L1VScrollH	= $9F3A

Vera_Reg_AudioCtrl	= $9F3B
Vera_Reg_AudioRate	= $9F3C
Vera_Reg_AudioData	= $9F3D
Vera_Reg_SPIData	= $9F3E
Vera_Reg_SPICtrl	= $9F3F

Vera_Stride_0		= $0 << 4
Vera_Stride_1		= $1 << 4
Vera_Stride_2		= $2 << 4
Vera_Stride_4		= $3 << 4
Vera_Stride_8		= $4 << 4
Vera_Stride_16		= $5 << 4
Vera_Stride_32		= $6 << 4
Vera_Stride_64		= $7 << 4
Vera_Stride_128		= $8 << 4
Vera_Stride_256		= $9 << 4
Vera_Stride_512		= $A << 4
Vera_Stride_40		= $B << 4
Vera_Stride_80		= $C << 4
Vera_Stride_160		= $D << 4
Vera_Strade_320		= $E << 4
Vera_Stride_640		= $F << 4

Vera_MapH32		= %00000000
Vera_MapH64		= %01000000
Vera_MapH128		= %10000000
Vera_MapH256		= %11000000

Vera_MapW32		= %00000000
Vera_MapW64		= %00010000
Vera_MapW128		= %00100000
Vera_MapW256		= %00110000

Vera_TileMode_1BPP16	= %00000000
Vera_TileMode_1BBP256	= %00001000
Vera_TileMode_2BPP	= %00000001
Vera_TileMode_4BPP	= %00000010
Vera_TileMode_8BPP	= %00000011

Vera_BitmapMode_1BPP	= %00000100
Vera_BitmapMode_2BPP	= %00000101
Vera_BitmapMode_4BPP	= %00000110
Vera_BitmapMode_8BPP	= %00000111

Vera_L0Enable		= %00010000
Vera_L1Enable		= %00100000
Vera_ChromaDisable	= %00000100
Vera_VGAOutput		= %00000001

Vera_TileW8		= %00000000
Vera_TileW16		= %00000001
Vera_TileH8		= %00000000
Vera_TileH16		= %00000010

Vera_Scale1X		= 128
Vera_Scale2X		= 64
Vera_Scale4X		= 32
Vera_Scale8X		= 16

Vera_RAM_Bitmap		= $00000
Vera_RAM_Sprites	= $13000
Vera_RAM_Text		= $1B000
Vera_RAM_Charset	= $1F000
Vera_RAM_PSG		= $1F9C0
Vera_RAM_Palette	= $1FA00
Vera_RAM_SpriteAttr	= $1FC00

X16_Reg_R0		= $02
X16_Reg_R0L		= X16_Reg_R0
X16_Reg_R0H		= X16_Reg_R0+1
X16_Reg_R1		= $04
X16_Reg_R1L		= X16_Reg_R1
X16_Reg_R1H		= X16_Reg_R1+1
X16_Reg_R2		= $06
X16_Reg_R2L		= X16_Reg_R2
X16_Reg_R2H		= X16_Reg_R2+1
X16_Reg_R3		= $08
X16_Reg_R3L		= X16_Reg_R3
X16_Reg_R3H		= X16_Reg_R3+1
X16_Reg_R4		= $0A
X16_Reg_R4L		= X16_Reg_R4
X16_Reg_R4H		= X16_Reg_R4+1
X16_Reg_R5		= $0C
X16_Reg_R5L		= X16_Reg_R5
X16_Reg_R5H		= X16_Reg_R5+1
X16_Reg_R6		= $0E
X16_Reg_R6L		= X16_Reg_R6
X16_Reg_R6H		= X16_Reg_R6+1
X16_Reg_R7		= $10
X16_Reg_R7L		= X16_Reg_R7
X16_Reg_R7H		= X16_Reg_R7+1
X16_Reg_R8		= $12
X16_Reg_R8L		= X16_Reg_R8
X16_Reg_R8H		= X16_Reg_R8+1
X16_Reg_R9		= $14
X16_Reg_R9L		= X16_Reg_R9
X16_Reg_R9H		= X16_Reg_R9+1
X16_Reg_R10		= $16
X16_Reg_R10L		= X16_Reg_R10
X16_Reg_R10H		= X16_Reg_R10+1
X16_Reg_R11		= $18
X16_Reg_R11L		= X16_Reg_R11
X16_Reg_R11H		= X16_Reg_R11+1
X16_Reg_R12		= $1A
X16_Reg_R12L		= X16_Reg_R12
X16_Reg_R12H		= X16_Reg_R12+1
X16_Reg_R13		= $1C
X16_Reg_R13L		= X16_Reg_R13
X16_Reg_R13H		= X16_Reg_R13+1
X16_Reg_R14		= $1E
X16_Reg_R14L		= X16_Reg_R14
X16_Reg_R14H		= X16_Reg_R14+1
X16_Reg_R15		= $20
X16_Reg_R15L		= X16_Reg_R15
X16_Reg_R15H		= X16_Reg_R15+1
; Below are not official registers, merely the remaining ZP addresses up to $30
X16_Reg_X0		= $22
X16_Reg_X0L		= X16_Reg_X0
X16_Reg_X0H		= X16_Reg_X0+1
X16_Reg_X1		= $24
X16_Reg_X1L		= X16_Reg_X1
X16_Reg_X1H		= X16_Reg_X1+1
X16_Reg_X2		= $26
X16_Reg_X2L		= X16_Reg_X2
X16_Reg_X2H		= X16_Reg_X2+1
X16_Reg_X3		= $28
X16_Reg_X3L		= X16_Reg_X3
X16_Reg_X3H		= X16_Reg_X3+1
X16_Reg_X4		= $2A
X16_Reg_X4L		= X16_Reg_X4
X16_Reg_X4H		= X16_Reg_X4+1
X16_Reg_X5		= $2C
X16_Reg_X5L		= X16_Reg_X5
X16_Reg_X5H		= X16_Reg_X5+1
X16_Reg_X6		= $2E
X16_Reg_X6L		= X16_Reg_X6
X16_Reg_X6H		= X16_Reg_X6+1
; Below are addresses are arbitrary as any ZP address can be used as a pointer 
X16_PTR_0		= $30
X16_PTR_1		= $32
X16_PTR_2		= $34
X16_PTR_3		= $36
X16_PTR_4		= $38
X16_PTR_5		= $3A
X16_PTR_6		= $3C
X16_PTR_7		= $3E
X16_PTR_8		= $40
X16_PTR_9		= $42
X16_PTR_A		= $44
X16_PTR_B		= $46
X16_PTR_C		= $48
X16_PTR_D		= $4A
X16_PTR_E		= $4C
X16_PTR_F		= $4E

X16_GIF_Ctrl		= $9FB5
X16_WAV_Ctrl		= $9FB6

X16_YM2151_Ctrl		= $9F40
X16_YM2151_Data		= $9F41

X16_ROMBank_Reg		= $01
X16_RAMBank_Reg		= $00

; ROM Bank definitions
X16_ROMBank_Kernal	= 0
X16_ROMBank_Keyboard	= 1
X16_ROMBank_CBDOS	= 2
X16_ROMBank_FAT32	= 3
X16_ROMBank_BASIC	= 4
X16_ROMBank_Monitor	= 5
X16_ROMBank_Charset	= 6
X16_ROMBank_Diagnostic	= 7
X16_ROMBank_Graphics	= 8
X16_ROMBank_Demo	= 9
X16_ROMBank_Audio	= 10
X16_ROMBank_Utility	= 11
X16_ROMBank_Bannex	= 12
X16_ROMBank_X16Edit	= 13
X16_ROMBank_X16Edit1	= X16_ROMBank_X16Edit
X16_ROMBank_X16EDit2	= 14
X16_ROMBank_BASLoad	= 15

; Banked addresses and sizes
X16_RAM_Window		= $A000
X16_RAM_WindowSize	= $2000
X16_ROM_Window		= $C000
X16_ROM_WindowSize	= $4000

X16_I2C_SMC		= $42
X16_I2C_RTC		= $6F

; RAM Vectors
X16_Vector_IRQ		= $0314
X16_Vector_CINV		= $0314
X16_Vector_CBINV	= $0316
X16_Vector_NMINV	= $0318
X16_Vector_IOpen	= $031A
X16_Vector_IClose	= $031C
X16_Vector_IChkIn	= $031E
X16_Vector_ICkOut	= $0320
X16_Vector_IClrCh	= $0322
X16_Vector_IBASIn	= $0324
X16_Vector_IBsOut	= $0326
X16_Vector_IStop	= $0328
X16_Vector_IGetIn	= $032A
X16_Vector_ClAll	= $032C
X16_Vector_KeyHandler	= $032E
X16_Vector_ILoad	= $0330
X16_Vector_ISave	= $0332

; Text mode ports (not supported and changes between ROM releases)
X16_TextMode_ColorPort	= $0376 ; .color in kernal.sym (current color used by BASIC)
X16_TextMode_Columns	= $0386 ; .llen in kernal.sym (number of columns in current text mode)
X16_TextMode_Lines	= $0387 ; .nlines in kernal.sym (number of lines in current text mode)

; SMC Register addresses
X16_SMCReg_Power	= $01
X16_SMCReg_Reset	= $02
X16_SMCReg_NMI		= $03
X16_SMCreg_PowerLED	= $04 ; Undocumented ?
X16_SMCReg_ActivityLED	= $05
X16_SMCReg_KbdBuf	= $07
X16_SMCReg_Echo		= $08
X16_SMCReg_PS2Status	= $18
X16_SMCReg_PS2Command	= $19
X16_SMCReg_SetMouseID	= $20
X16_SMCReg_MouseBuffer	= $21
X16_SMCReg_GetMouseID	= $22
X16_SMCReg_MajorVer	= $30
X16_SMCReg_MinorVer	= $31
X16_SMCReg_PatchVer	= $32
X16_SMCReg_StartBoot	= $8F

; SMC Command codes, these need to be written to correct register to function
X16_SMCCMD_PowerOff	= $00
X16_SMCCMD_HardReboot	= $01
X16_SMCCMD_InjectReset	= $00
X16_SMCCMD_INjectNMI	= $00
X16_SMCCMD_LEDOff	= $00
X16_SMCCMD_LEDOn	= $FF
X16_SMCCMD_StdMouse	= $00 ; Standard Mouse
X16_SMCCMD_Intelli	= $03 ; Intellimouse with scroll wheel
X16_SMCCMD_IntelliPlus	= $04 ; Intellimouse with scroll wheel + extra buttons
X16_SMCCMD_BootLoader	= $31

; RTC (Real Time Clock) Registers
X16_RTCReg_ClockSeconds	= $00
X16_RTCReg_ClockMinutes	= $01
X16_RTCReg_ClockHours	= $02
X16_RTCReg_ClockWeekday	= $03
X16_RTCReg_ClockDay	= $04
X16_RTCReg_ClockMonth	= $05
X16_RTCReg_ClockYear	= $06
X16_RTCReg_Control	= $07
X16_RTCReg_OscTrim	= $08
X16_RTCReg_Alarm0_Secs	= $0A
X16_RTCReg_Alarm0_Mins	= $0B
X16_RTCReg_Alarm0_Hours	= $0C
X16_RTCReg_Alarm0_WDay	= $0D
X16_RTCReg_Alarm0_Day	= $0E
X16_RTCReg_Alarm0_Month	= $0F
X16_RTCReg_Alarm1_Secs	= $11
X16_RTCReg_Alarm1_Mins	= $12
X16_RTCReg_Alarm1_Hours	= $13
X16_RTCReg_Alarm1_WDay	= $14
X16_RTCReg_Alarm1_Day	= $15
X16_RTCReg_Alarm1_Month	= $16
X16_RTCReg_PwrFail_Min	= $18
X16_RTCReg_PwrFail_Hour	= $19
X16_RTCReg_PwrFail_Day	= $1A
X16_RTCReg_PwrFail_Mon	= $1B
X16_RTCReg_PwrUp_Mins	= $1C
X16_RTCReg_PwrUp_Hours	= $1D
X16_RTCReg_PwrUp_Day	= $1E
X16_RTCReg_PwerUp_Month	= $1F

; Screen modes
X16_ScrMode_80x60	= $00
X16_ScrMode_80x30	= $01
X16_ScrMode_40x60	= $02
X16_ScrMode_40x30	= $03
X16_ScrMode_40x15	= $04
X16_ScrMode_20x30	= $05
X16_ScrMode_20x15	= $06
X16_ScrMode_22x23	= $07
X16_ScrMode_64x50	= $08
X16_ScrMode_64x25	= $09
X16_ScrMode_32x50	= $0A
X16_ScrMode_32x25	= $0B
X16_ScrMode_320x240	= $80
X16_ScrMode_640x480	= $81
X16_ScrMode_Toggle	= $FF

; Definition of the first 16 default colors on the Commander X16
X16_Color_Black		= 0
X16_Color_White		= 1
X16_Color_Red		= 2
X16_Color_Cyan		= 3
X16_Color_Purple	= 4
X16_Color_Green		= 5
X16_Color_Blue		= 6
X16_Color_Yellow	= 7
X16_Color_Orange	= 8
X16_Color_Brown		= 9
X16_Color_LightRed	= 10
X16_Color_DargGray	= 11
X16_Color_MidGray	= 12
X16_Color_LightGreen	= 13
X16_Color_LightBlue	= 14
X16_Color_LightGray	= 15
; Foreground colors are stored in the lower nibble
X16_FGColor_Black	= 0
X16_FGColor_White	= 1
X16_FGColor_Red		= 2
X16_FGColor_Cyan	= 3
X16_FGColor_Purple	= 4
X16_FGColor_Green	= 5
X16_FGColor_Blue	= 6
X16_FGColor_Yellow	= 7
X16_FGColor_Orange	= 8
X16_FGColor_Brown	= 9
X16_FGColor_LightRed	= 10
X16_FGColor_DargGray	= 11
X16_FGColor_MidGray	= 12
X16_FGColor_LightGreen	= 13
X16_FGColor_LightBlue	= 14
X16_FGColor_LightGray	= 15
; Background colors are stored in the upper nibble
X16_BGColor_Black	= 0  << 4
X16_BGColor_White	= 1  << 4
X16_BGColor_Red		= 2  << 4
X16_BGColor_Cyan	= 3  << 4
X16_BGColor_Purple	= 4  << 4
X16_BGColor_Green	= 5  << 4
X16_BGColor_Blue	= 6  << 4
X16_BGColor_Yellow	= 7  << 4
X16_BGColor_Orange	= 8  << 4
X16_BGColor_Brown	= 9  << 4
X16_BGColor_LightRed	= 10 << 4
X16_BGColor_DargGray	= 11 << 4
X16_BGColor_MidGray	= 12 << 4
X16_BGColor_LightGreen	= 13 << 4
X16_BGColor_LightBlue	= 14 << 4
X16_BGColor_LightGray	= 15 << 4
; SNES Buttons
X16_Joy_B		= $80
X16_Joy_Y		= $40
X16_Joy_Select		= $20
X16_Joy_Start		= $10
X16_joy_Up		= $08
X16_Joy_Down		= $04
X16_Joy_Left		= $02
X16_Joy_Right		= $01
X16_Joy_A		= $80
X16_Joy_X		= $40
X16_Joy_LeftShoulder	= $20
X16_Joy_RightShoulder	= $10
; X16 Kernal functions
X16_Kernal_ACPTR			= $FFA5
X16_Kernal_BASIN			= $FFCF
X16_Kernal_BSAVE			= $FEBA
X16_Kernal_BSOUT			= $FFD2
X16_Kernal_CIOUT			= $FFA8
X16_Kernal_CLALL			= $FFE7
X16_Kernal_CLOSE			= $FFC3
X16_Kernal_CHKIN			= $FFC6
X16_Kernal_CHKOUT			= $FFC9
X16_Kernal_clock_get_date		= $FF50
X16_Kernal_clock_set_date		= $FF4D
X16_Kernal_CHRIN			= $FFCF
X16_Kernal_CHROUT			= $FFD2
X16_Kernal_CLOSE_ALL			= $FF4A
X16_Kernal_CLRCHN			= $FFCC
X16_Kernal_console_init			= $FEDB
X16_Kernal_console_get_char 		= $FEE1
X16_Kernal_console_put_char 		= $FED8
X16_Kernal_console_put_image 		= $FED8
X16_Kernal_console_set_paging_message	= $FED5
X16_Kernal_enter_basic			= $FF47
X16_Kernal_entropy_get			= $FECF
X16_Kernal_extapi			= $FEAB
X16_Kernal_extapi16			= $FEA8
X16_Kernal_fetch			= $FF74
X16_Kernal_FB_cursor_next_line		= $FF02
X16_Kernal_FB_cursor_position		= $FEFF
X16_Kernal_FB_fill_pixels		= $FF17
X16_Kernal_FB_filter_pixels		= $FF1A
X16_Kernal_FB_get_info			= $FEF9
X16_Kernal_FB_get_pixel			= $FF05
X16_Kernal_FB_get_pixels		= $FF08
X16_Kernal_FB_init			= $FEF6
X16_Kernal_FB_move_pixels		= $FF1D
X16_Kernal_FB_set_8_pixels		= $FF11
X16_Kernal_FB_set_8_pixels_opaque	= $FF14
X16_Kernal_FB_set_palette		= $FEFC
X16_Kernal_FB_set_pixel			= $FF0B
X16_Kernal_FB_set_pixels		= $FF0E
X16_Kernal_GETIN			= $FFE4
X16_Kernal_GRAPH_clear			= $FF23
X16_Kernal_GRAPH_draw_image		= $FF38
X16_Kernal_GRAPH_draw_line		= $FF2C
X16_Kernal_GRAPH_draw_oval		= $FF35
X16_Kernal_GRAPH_draw_rect		= $FF2F
X16_Kernal_GRAPH_get_char_size		= $FF3E
X16_Kernal_GRAPH_init			= $FF20
X16_Kernal_GRAPH_move_rect		= $FF32
X16_Kernal_GRAPH_put_char		= $FF41
X16_Kernal_GRAPH_set_colors		= $FF29
X16_Kernal_GRAPH_set_font		= $FF3B
X16_Kernal_GRAPH_set_window		= $FF26
X16_Kernal_i2c_batch_read		= $FEB4
X16_Kernal_i2c_batch_write		= $FEB7
X16_Kernal_i2c_read_byte		= $FEC6
X16_Kernal_i2c_write_byte		= $FEC9
X16_Kernal_IOBASE			= $FFF3
X16_Kernal_JSRFAR			= $FF6E
X16_Kernal_joystick_get			= $FF56
X16_Kernal_joystick_scan		= $FF53
X16_Kernal_kbd_scan			= $FF9F
X16_Kernal_kbdbuf_get_modifiers		= $FEC0
X16_Kernal_kbdbuf_peek			= $FEBD
X16_Kernal_kbdbuf_put			= $FEC3
X16_Kernal_keymap			= $FED2
X16_Kernal_LISTEN			= $FFB1
X16_Kernal_LKUPLA			= $FF59
X16_Kernal_LKUPSA			= $FF5C
X16_Kernal_LOAD				= $FFD5
X16_Kernal_MACPTR			= $FF44
X16_Kernal_MCIOUT			= $FEB1
X16_Kernal_MEMBOT			= $FF9C
X16_Kernal_MEMTOP			= $FF99
X16_Kernal_memory_copy			= $FEE7
X16_Kernal_memory_crc			= $FEEA
X16_Kernal_memory_decompress		= $FEED
X16_Kernal_memory_fill			= $FEE4
X16_Kernal_monitor			= $FECC
X16_Kernal_mouse_config			= $FF68
X16_Kernal_mouse_get			= $FF6B
X16_Kernal_mouse_scan			= $FF71
X16_Kernal_OPEN				= $FFC0
X16_Kernal_PLOT				= $FFF0
X16_Kernal_PRIMM			= $FF7D
X16_Kernal_RDTIM			= $FFDE
X16_Kernal_READST			= $FFB7
X16_Kernal_SAVE				= $FFD8
X16_Kernal_SCNKEY			= $FF9F
X16_Kernal_SCREEN			= $FFED
X16_Kernal_screen_mode			= $FF5F
X16_Kernal_screen_set_charset		= $FF62
X16_Kernal_SECOND			= $FF93
X16_Kernal_SETLFS			= $FFBA
X16_Kernal_SETMSG			= $FF90
X16_Kernal_SETNAM			= $FFBD
X16_Kernal_SETTIM			= $FFDB
X16_Kernal_SETTMO			= $FFA2
X16_Kernal_sprite_set_image		= $FEF0
X16_Kernal_sprite_set_position		= $FEF3
X16_Kernal_stash			= $FF77
X16_Kernal_STOP				= $FFE1
X16_Kernal_TALK				= $FFB4
X16_Kernal_TKSA				= $FF96
X16_Kernal_UDTIM			= $FFEA
X16_Kernal_UNLSN			= $FFAE
X16_Kernal_UNTLK			= $FFAB

; PET Color Codes
PET_Color_Black		= $90
PET_Color_White		= $05
PET_Color_RED		= $1C
PET_Color_Cyan		= $9F
PET_Color_Purple	= $9C
PET_Color_Green		= $1E
PET_Color_Blue		= $1F
PET_Color_Yellow	= $9E
PET_Color_Orange	= $81
PET_Color_Brown		= $95
PET_Color_LightRed	= $96
PET_Color_DargGray	= $97
PET_Color_MidGray	= $98
PET_Color_LightGreen	= $99
PET_Color_LightBlue	= $9A
PET_Color_LightGray	= $9B
; PET Control Codes
PET_Ctrl_SwapFGBG	= $01
PET_Ctrl_Stop		= $03
PET_Ctrl_Underline	= $04
PET_Ctrl_BOLD		= $06
PET_Ctrl_BELL		= $07
PET_Ctrl_Backspace	= $08
PET_Ctrl_Tab		= $09
PET_Ctrl_LineFeed	= $0A
PET_Ctrl_Italics	= $0B
PET_Ctrl_Outline	= $0C
PET_Ctrl_Return		= $0D
PET_Ctrl_CharLoUp	= $0E
PET_Ctrl_ISOOn		= $0F
PET_Ctrl_CursorDow	= $11
PET_Ctrl_Reverse	= $12
PET_Ctrl_Home		= $13
PET_Ctrl_Delete		= $14
PET_Ctrl_ShiftTab	= $18
PET_Ctrl_CursorRight	= $1D
PET_Ctrl_Run		= $83
PET_Ctrl_Help		= $84
PET_Ctrl_ShiftReturn	= $8D
PET_Ctrl_CharUpGfx	= $8E
PET_Ctrl_ISOOff		= $8F
PET_Ctrl_CursorUp	= $91
PET_Ctrl_ReverseOff	= $92
PET_Ctrl_Clear		= $93
PET_Ctrl_Insert		= $94
PET_Ctrl_CursorLeft	= $9D

; Uncomment for CC65 assembler
.endif